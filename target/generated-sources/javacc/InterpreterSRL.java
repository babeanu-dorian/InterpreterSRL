/* InterpreterSRL.java */
/* Generated by: ParserGeneratorCC: Do not edit this line. InterpreterSRL.java */
import java.util.*;
import java.io.*;
import com.bachelor_project.interpreterast.statements.*;
import com.bachelor_project.interpreterast.functions.*;
import com.bachelor_project.reactive.Program;
import org.apache.commons.text.StringEscapeUtils;

public class InterpreterSRL implements InterpreterSRLConstants {
    private int lineNumber = 1;
    private String fileName;

    public InterpreterSRL(String fileName) throws FileNotFoundException {
        this(new FileReader(fileName));
        this.fileName = fileName;
    }

    public int getLineNumber() {
        return this.lineNumber;
    }

    public void setLineNumber(int lineNumber) {
        this.lineNumber = lineNumber;
    }

    public static void main(String args[]) throws ParseException
    {
        if (args.length < 1) {
            System.err.println("Specify a file as command line argument.");
            System.exit(-1);
        }

        InterpreterSRL parser = null;

        try {

            parser = new InterpreterSRL(args[0]);
            Program program = parser.program();

            try{
                program.execute();
                System.exit(0); // stop all threads, safe because they're all suspended,
                                // but consider doing this in a nicer way
            } catch (IOException e) {
                System.err.println(e);
            } catch (RuntimeException e) {
                System.err.println(e);
            }

        } catch (FileNotFoundException ex) {

            System.err.println("File not found: " + args[0]);
            System.exit(-1);

        } catch (ParseException ex) {

            System.err.println("Syntax error on line: " + parser.getLineNumber() + " in file " + args[0]);
            System.exit(-1);

        }
    }

  final public Program program() throws ParseException {List<String> signalList;
    List<String> sharedData;
    Map<String, FunctionDefinition> declarations = Program.keywordDefinitions();
    Statement currentStatement;
    List<Statement> statements = new ArrayList<Statement>();
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case IMPORT:{
      importList(declarations);
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    signalList = signalDomain();
    sharedData = sharedData();
    label_1:
    while (true) {
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case NULL:
      case TRUE:
      case FALSE:
      case LET:
      case NOT:
      case ID:
      case STRING:
      case INT:
      case FLOAT:
      case 21:{
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case NULL:
      case TRUE:
      case FALSE:
      case NOT:
      case ID:
      case STRING:
      case INT:
      case FLOAT:
      case 21:{
        currentStatement = statementWithSemicolon();
statements.add(currentStatement);
        break;
        }
      case LET:{
        declaration(declarations);
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
{if ("" != null) return new Program(signalList, sharedData, declarations, new StatementSequence(statements));}
    throw new IllegalStateException ("Missing return statement in function");
}

  final public void library(Map<String, FunctionDefinition> declarations) throws ParseException {
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case IMPORT:{
      importList(declarations);
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    label_2:
    while (true) {
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case LET:{
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      declaration(declarations);
    }
    jj_consume_token(0);
}

  final public void importList(Map<String, FunctionDefinition> declarations) throws ParseException {List<String> fileList;
    jj_consume_token(IMPORT);
    jj_consume_token(19);
    fileList = stringList();
    jj_consume_token(20);
String filePath = (new File(this.fileName)).getParent();

                                                        for (String fileName : fileList) {

                                                            // TODO: check if the file was already parsed (multiple includes)

                                                            String importedFile = (new File(filePath, fileName)).getPath();

                                                            InterpreterSRL libParser = null;

                                                            try {

                                                                libParser = new InterpreterSRL(importedFile);
                                                                libParser.library(declarations);

                                                            } catch (FileNotFoundException ex) {

                                                                System.err.println("File not found: " + fileName);
                                                                System.err.println("Requested from file " + this.fileName);
                                                                System.exit(-1);

                                                            } catch (ParseException ex) {

                                                                System.err.println("Syntax error on line " + libParser.getLineNumber() + " in file " + fileName);
                                                                System.exit(-1);

                                                            }
                                                        }
}

  final public List<String> signalDomain() throws ParseException {List<String> signalList;
    jj_consume_token(SIGNAL_DOMAIN);
    jj_consume_token(19);
    signalList = identifierList();
    jj_consume_token(20);
{if ("" != null) return signalList;}
    throw new IllegalStateException ("Missing return statement in function");
}

  final public List<String> sharedData() throws ParseException {List<String> varList;
    jj_consume_token(SHARED_DATA);
    jj_consume_token(19);
    varList = identifierList();
    jj_consume_token(20);
{if ("" != null) return varList;}
    throw new IllegalStateException ("Missing return statement in function");
}

  final public void declaration(Map<String, FunctionDefinition> declarations) throws ParseException {List<String> parameterNames;
    Statement functionCode;
    Token idTok;
    jj_consume_token(LET);
    idTok = jj_consume_token(ID);
    jj_consume_token(21);
    parameterNames = identifierList();
    jj_consume_token(22);
    jj_consume_token(23);
    functionCode = statementWithSemicolon();
if (declarations.containsKey(idTok.toString())) {
                                                              System.err.println("Multiple definitions of function: " + idTok.toString());
                                                              throw new ParseException(); // TODO: use a different exception
                                                           }
                                                           declarations.put(idTok.toString(), new UserFunctionDefinition(parameterNames, functionCode));
}

  final public Statement statementWithSemicolon() throws ParseException {Statement statement;
    statement = statement();
    jj_consume_token(24);
{if ("" != null) return statement;}
    throw new IllegalStateException ("Missing return statement in function");
}

  final public Statement statement() throws ParseException {Statement lhs;
    Statement rhs;
    lhs = orExpression();
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case 23:{
      jj_consume_token(23);
      rhs = statement();
lhs = new Assignment(lhs, rhs);
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
{if ("" != null) return lhs;}
    throw new IllegalStateException ("Missing return statement in function");
}

  final public Statement orExpression() throws ParseException {Statement exp;
    Statement temp;
    exp = andExpression();
    label_3:
    while (true) {
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case OR:{
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      jj_consume_token(OR);
      temp = andExpression();
exp = new LogicalOr(exp, temp);
    }
{if ("" != null) return exp;}
    throw new IllegalStateException ("Missing return statement in function");
}

  final public Statement andExpression() throws ParseException {Statement exp;
    Statement temp;
    exp = logicalAtom();
    label_4:
    while (true) {
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case AND:{
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      jj_consume_token(AND);
      temp = logicalAtom();
exp = new LogicalAnd(exp, temp);
    }
{if ("" != null) return exp;}
    throw new IllegalStateException ("Missing return statement in function");
}

  final public Statement logicalAtom() throws ParseException {Statement exp;
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case NULL:
    case TRUE:
    case FALSE:
    case ID:
    case STRING:
    case INT:
    case FLOAT:
    case 21:{
      exp = comparison();
      break;
      }
    case NOT:{
      jj_consume_token(NOT);
      exp = comparison();
exp = new LogicalNot(exp);
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new IllegalStateException ("Missing return statement in function");
}

  final public Statement comparison() throws ParseException {Statement lhs;
    Statement rhs;
    lhs = calculation();
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:{
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case 25:{
        jj_consume_token(25);
        rhs = calculation();
lhs = new Equality(lhs, rhs);
        break;
        }
      case 26:{
        jj_consume_token(26);
        rhs = calculation();
lhs = new LogicalNot(new Equality(lhs, rhs));
        break;
        }
      case 27:{
        jj_consume_token(27);
        rhs = calculation();
lhs = new LessThan(lhs, rhs);
        break;
        }
      case 28:{
        jj_consume_token(28);
        rhs = calculation();
lhs = new LogicalNot(new GreaterThan(lhs, rhs));
        break;
        }
      case 29:{
        jj_consume_token(29);
        rhs = calculation();
lhs = new GreaterThan(lhs, rhs);
        break;
        }
      case 30:{
        jj_consume_token(30);
        rhs = calculation();
lhs = new LogicalNot(new LessThan(lhs, rhs));
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      ;
    }
{if ("" != null) return lhs;}
    throw new IllegalStateException ("Missing return statement in function");
}

  final public Statement calculation() throws ParseException {Statement exp;
    Statement temp;
    exp = term();
    label_5:
    while (true) {
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case 31:
      case 32:{
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        break label_5;
      }
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case 31:{
        jj_consume_token(31);
        temp = term();
exp = new Addition(exp, temp);
        break;
        }
      case 32:{
        jj_consume_token(32);
        temp = term();
exp = new Subtraction(exp, temp);
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return exp;}
    throw new IllegalStateException ("Missing return statement in function");
}

  final public Statement term() throws ParseException {Statement exp;
    Statement temp;
    exp = factor();
    label_6:
    while (true) {
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case 33:
      case 34:
      case 35:{
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        break label_6;
      }
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case 33:{
        jj_consume_token(33);
        temp = factor();
exp = new Multiplication(exp, temp);
        break;
        }
      case 34:{
        jj_consume_token(34);
        temp = factor();
exp = new Division(exp, temp);
        break;
        }
      case 35:{
        jj_consume_token(35);
        temp = factor();
exp = new Modulo(exp, temp);
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return exp;}
    throw new IllegalStateException ("Missing return statement in function");
}

  final public Statement factor() throws ParseException {Statement statement = new Value(null);
    Statement index;
    List<Statement> paramList;
    Token tok;
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case NULL:
    case TRUE:
    case FALSE:
    case STRING:
    case INT:
    case FLOAT:{
      statement = constant();
      break;
      }
    case 21:{
      jj_consume_token(21);
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case NULL:
      case TRUE:
      case FALSE:
      case NOT:
      case ID:
      case STRING:
      case INT:
      case FLOAT:
      case 21:{
        statement = statementSequence();
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      jj_consume_token(22);
      break;
      }
    case ID:{
      tok = jj_consume_token(ID);
statement = new Identifier(tok.toString());
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case 20:
      case 21:
      case 36:{
        switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
        case 21:{
          paramList = parameterList();
statement = new FunctionCall( (Identifier) statement, paramList );
          break;
          }
        case 20:
        case 36:{
          label_7:
          while (true) {
            index = index();
statement = new IndexOperation(statement, index);
            switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
            case 20:
            case 36:{
              break;
              }
            default:
              jj_la1[16] = jj_gen;
              break label_7;
            }
          }
          break;
          }
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return statement;}
    throw new IllegalStateException ("Missing return statement in function");
}

  final public Statement index() throws ParseException {Token tok;
    Statement statement;
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case 20:{
      jj_consume_token(20);
      tok = jj_consume_token(ID);
{if ("" != null) return new Value(tok.toString());}
      break;
      }
    case 36:{
      jj_consume_token(36);
      statement = statement();
      jj_consume_token(37);
{if ("" != null) return statement;}
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new IllegalStateException ("Missing return statement in function");
}

  final public Value constant() throws ParseException {Token tok;
    String str;
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case INT:{
      tok = jj_consume_token(INT);
{if ("" != null) return new Value(Integer.parseInt(tok.toString()));}
      break;
      }
    case FLOAT:{
      tok = jj_consume_token(FLOAT);
{if ("" != null) return new Value(Double.parseDouble(tok.toString()));}
      break;
      }
    case STRING:{
      str = stringConstant();
{if ("" != null) return new Value(str);}
      break;
      }
    case NULL:{
      jj_consume_token(NULL);
{if ("" != null) return new Value(null);}
      break;
      }
    case TRUE:{
      jj_consume_token(TRUE);
{if ("" != null) return new Value(true);}
      break;
      }
    case FALSE:{
      jj_consume_token(FALSE);
{if ("" != null) return new Value(false);}
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new IllegalStateException ("Missing return statement in function");
}

  final public String stringConstant() throws ParseException {String str;
    Token tok;
    tok = jj_consume_token(STRING);
str = tok.toString();
                            str = str.substring(1, str.length() - 1);
                            str = StringEscapeUtils.unescapeJava(str);
                            {if ("" != null) return str;}
    throw new IllegalStateException ("Missing return statement in function");
}

  final public Statement statementSequence() throws ParseException {ArrayList<Statement> statementList = new ArrayList<Statement>();
    Statement currentStatement;
    currentStatement = statement();
statementList.add(currentStatement);
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case 24:{
      jj_consume_token(24);
      label_8:
      while (true) {
        switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
        case NULL:
        case TRUE:
        case FALSE:
        case NOT:
        case ID:
        case STRING:
        case INT:
        case FLOAT:
        case 21:{
          break;
          }
        default:
          jj_la1[22] = jj_gen;
          break label_8;
        }
        currentStatement = statementWithSemicolon();
statementList.add(currentStatement);
      }
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      ;
    }
if (statementList.size() == 1)
                                                                {if ("" != null) return statementList.get(0);}
                                                            {if ("" != null) return new StatementSequence(statementList);}
    throw new IllegalStateException ("Missing return statement in function");
}

  final public List<Statement> parameterList() throws ParseException {List<Statement> parameterList = new ArrayList<Statement>();
    Statement currentStatement;
    jj_consume_token(21);
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case NULL:
    case TRUE:
    case FALSE:
    case NOT:
    case ID:
    case STRING:
    case INT:
    case FLOAT:
    case 21:{
      currentStatement = statementSequence();
parameterList.add(currentStatement);
      label_9:
      while (true) {
        switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
        case 38:{
          break;
          }
        default:
          jj_la1[24] = jj_gen;
          break label_9;
        }
        jj_consume_token(38);
        currentStatement = statementSequence();
parameterList.add(currentStatement);
      }
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    jj_consume_token(22);
{if ("" != null) return parameterList;}
    throw new IllegalStateException ("Missing return statement in function");
}

  final public List<String> identifierList() throws ParseException {List<String> idList = new ArrayList<String>();
    Token tok;
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case ID:{
      tok = jj_consume_token(ID);
idList.add(tok.toString());
      label_10:
      while (true) {
        switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
        case 38:{
          break;
          }
        default:
          jj_la1[26] = jj_gen;
          break label_10;
        }
        jj_consume_token(38);
        tok = jj_consume_token(ID);
idList.add(tok.toString());
      }
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      ;
    }
{if ("" != null) return idList;}
    throw new IllegalStateException ("Missing return statement in function");
}

  final public List<String> stringList() throws ParseException {String str;
    List<String> strList = new ArrayList<String>();
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case STRING:{
      str = stringConstant();
strList.add(str);
      label_11:
      while (true) {
        switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
        case 38:{
          break;
          }
        default:
          jj_la1[28] = jj_gen;
          break label_11;
        }
        jj_consume_token(38);
        str = stringConstant();
strList.add(str);
      }
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      ;
    }
{if ("" != null) return strList;}
    throw new IllegalStateException ("Missing return statement in function");
}

  /** Generated Token Manager. */
  public InterpreterSRLTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[30];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x20,0x279f00,0x279f00,0x20,0x800,0x800000,0x2000,0x4000,0x279700,0x7e000000,0x7e000000,0x80000000,0x80000000,0x0,0x0,0x279700,0x100000,0x300000,0x300000,0x278700,0x100000,0x70700,0x279700,0x1000000,0x0,0x279700,0x0,0x8000,0x0,0x10000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0xe,0xe,0x0,0x10,0x10,0x10,0x0,0x10,0x0,0x0,0x0,0x40,0x0,0x40,0x0,0x40,0x0,};
	}

  /** Constructor with InputStream. */
  public InterpreterSRL(final java.io.InputStream stream) {
	  this(stream, null);
  }

  /** Constructor with InputStream and supplied encoding */
  public InterpreterSRL(final java.io.InputStream stream, final String encoding) {
   try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(final java.io.UnsupportedEncodingException e) { throw new IllegalStateException(e); }
	 token_source = new InterpreterSRLTokenManager(this, jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(final java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(final java.io.InputStream stream, final String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(final java.io.UnsupportedEncodingException e) { throw new IllegalStateException(e); }
	 token_source.ReInit(this,jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public InterpreterSRL(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new InterpreterSRLTokenManager(this, jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new InterpreterSRLTokenManager(this, jj_input_stream);
	}

	 token_source.ReInit(this,jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public InterpreterSRL(InterpreterSRLTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(InterpreterSRLTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(final int kind) throws ParseException {
    final Token oldToken = token;
    if (token.next != null)
      token = token.next;
    else {
      token.next = token_source.getNextToken();
      token = token.next;
    }
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


  /** Get the next Token. */
  public final Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  public final Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next == null)
        t.next = token_source.getNextToken();
      t = t.next;
    }
    return t;
  }

  private int jj_ntk_f() {
    jj_nt = token.next;
    if (jj_nt == null) {
      token.next = token_source.getNextToken();
      jj_ntk = token.next.kind;
      return jj_ntk;
    }
    jj_ntk = jj_nt.kind;
    return jj_ntk;
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[39];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 30; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 39; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled = false;

  /** Trace enabled. */
  public final boolean trace_enabled() {
    return trace_enabled;
  }

  /** Enable tracing. */
  public final void enable_tracing() {}

  /** Disable tracing. */
  public final void disable_tracing() {}

}
